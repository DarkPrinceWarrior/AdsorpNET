"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è AdsorpNET.
"""

import streamlit as st
from streamlit_option_menu import option_menu
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é - –î–û–õ–ñ–ù–û –ë–´–¢–¨ –ü–ï–†–í–û–ô –ö–û–ú–ê–ù–î–û–ô STREAMLIT!
st.set_page_config(
    page_title="AdsorpNET - AI —Å–µ—Ä–≤–∏—Å –ø–æ—Ä–∏—Å—Ç—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
    page_icon="üßä",
    layout="wide",
    initial_sidebar_state="expanded",
)

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
from src.pages import home, analysis, predict, team, info
from src.utils.ui import load_user_preferences
from src.utils.storage import clear_prediction_cache
from src.services.model_service import ModelService
from src.config.app_config import LOGGING_CONFIG
from src.config.model_config import MODEL_CONFIG

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging.config
logging.config.dictConfig(LOGGING_CONFIG)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∏–ª–∏
def load_styles():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç CSS —Å—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    css_path = Path("static/style.css")
    if css_path.exists():
        with open(css_path, encoding='utf-8') as css_file:
            st.markdown(f'<style>{css_file.read()}</style>', unsafe_allow_html=True)
    else:
        logger.error(f"–§–∞–π–ª —Å—Ç–∏–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {css_path}")

def initialize_services():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –º–æ–¥–µ–ª–µ–π (–ª–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)
    if 'model_service' not in st.session_state:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –º–æ–¥–µ–ª–µ–π")
        st.session_state.model_service = ModelService()
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    if 'cache_cleared' not in st.session_state:
        st.session_state.cache_cleared = False
    
    # –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
    if not st.session_state.cache_cleared:
        clear_prediction_cache()
        st.session_state.cache_cleared = True
        logger.info("–ö—ç—à –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –æ—á–∏—â–µ–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")

def create_sidebar():
    """–°–æ–∑–¥–∞–µ—Ç –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."""
    with st.sidebar:
        selected = option_menu(
            menu_title="ùêÄùêà —Å–µ—Ä–≤–∏—Å –ø–æ—Ä–∏—Å—Ç—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
            options=["–û –Ω–∞—Å", "MOFs –æ–ø–∏—Å–∞–Ω–∏–µ", "ùêÄùêà —Å–∏–Ω—Ç–µ–∑ MOFs", "–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"],
            icons=["house", "book", "box fill", "search", "person lines fill"],
            menu_icon="kanban fill",
            default_index=0,
            key="main_menu",
            styles={
                "container": {"padding": "0 % 0 % 0 % 0 %"},
                "icon": {"color": "red", "font-size": "25px"},
                "nav-link": {"font-size": "20px", "text-align": "start", "margin": "0px"},
                "nav-link-selected": {"background-color": "#483D8B"},
            }
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª—è—Ö
        if st.session_state.get('model_service'):
            with st.expander("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ", expanded=False):
                st.write("### –ú–æ–¥–µ–ª–∏")
                for model_name in MODEL_CONFIG:
                    st.write(f"‚úì {model_name}")
                
                # –î–æ–±–∞–≤–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É CUDA –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
                import torch
                if torch.cuda.is_available():
                    st.write("### CUDA")
                    st.write(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {torch.cuda.get_device_name(0)}")
                    memory = torch.cuda.get_device_properties(0).total_memory / (1024**3)
                    st.write(f"–ü–∞–º—è—Ç—å: {memory:.2f} –ì–ë")
        
        return selected

def run():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ AdsorpNET."""
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è AdsorpNET")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        load_user_preferences()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∏–ª–∏
        load_styles()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        initialize_services()
        
        # –°–æ–∑–¥–∞–µ–º –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é –∏ –ø–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç
        selected = create_sidebar()
        
        # –í—ã–±–æ—Ä –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if selected == "–û –Ω–∞—Å":
            home.show()
        elif selected == "ùêÄùêà —Å–∏–Ω—Ç–µ–∑ MOFs":
            predict.show()
        elif selected == "MOFs –æ–ø–∏—Å–∞–Ω–∏–µ":
            info.show()
        elif selected == "–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã":
            analysis.show()
        elif selected == "–ö–æ–Ω—Ç–∞–∫—Ç—ã":
            team.show()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {str(e)}", exc_info=True)
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {str(e)}")

if __name__ == "__main__":
    run()
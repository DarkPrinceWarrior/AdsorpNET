"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è AdsorpNET.
"""

import streamlit as st
from streamlit_option_menu import option_menu
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é - –î–û–õ–ñ–ù–û –ë–´–¢–¨ –ü–ï–†–í–û–ô –ö–û–ú–ê–ù–î–û–ô STREAMLIT!
st.set_page_config(
    page_title="AdsorpNET - AI —Å–µ—Ä–≤–∏—Å –ø–æ—Ä–∏—Å—Ç—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
    page_icon="üßä",
    layout="wide",
    initial_sidebar_state="expanded",
)

def add_custom_styles():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏."""
    st.markdown("""
    <style>
    /* –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã */
    :root {
        --primary-color: #4ECDC4;
        --secondary-color: #1E2D3A;
        --accent-color: #FF6B6B;
        --text-color: #FFFFFF;
        --background-color: #1A1A1A;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ */
    .css-1d391kg {
        background-color: var(--secondary-color);
    }
    
    /* –°—Ç–∏–ª—å –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ sidebar */
    .css-1cypcdb.e1fqkh3o11 {
        background-color: var(--secondary-color) !important;
    }
    
    /* –•–æ–≤–µ—Ä —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é */
    .nav-link:hover {
        background-color: #2B3E4F !important;
        transition: all 0.3s ease;
    }
    
    /* –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —ç–ª–µ–º–µ–Ω—Ç–∞ */
    .nav-link-selected {
        transition: all 0.3s ease !important;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ expander */
    .st-emotion-cache-rklbre h5 {
        color: var(--primary-color) !important;
        margin-bottom: 10px;
        font-size: 0.9rem !important;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è —Ñ—É—Ç–µ—Ä–∞ */
    .footer {
        position: fixed;
        bottom: 0;
        left: 0;
        width: 100%;
        background-color: var(--secondary-color);
        color: var(--text-color);
        text-align: center;
        padding: 10px;
        font-size: 0.8rem;
    }
    
    /* –°–∫—Ä–æ–ª–ª-–±–∞—Ä */
    ::-webkit-scrollbar {
        width: 5px;
        height: 5px;
    }
    
    ::-webkit-scrollbar-track {
        background: var(--secondary-color);
    }
    
    ::-webkit-scrollbar-thumb {
        background: #4ECDC4;
        border-radius: 10px;
    }
    
    ::-webkit-scrollbar-thumb:hover {
        background: #3DAAA2;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–∞–π–¥–±–∞—Ä–∞ */
    .st-emotion-cache-10oheav {
        padding-top: 1rem !important;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è —ç–∫—Å–ø–∞–Ω–¥–µ—Ä–∞ –≤ —Å–∞–π–¥–±–∞—Ä–µ */
    .st-emotion-cache-jy4u63 {
        background-color: #2B3E4F !important;
        border-radius: 5px !important;
        margin-bottom: 10px !important;
    }
    
    /* –£–¥–∞–ª–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—É –∏–∑ —Å–∞–π–¥–±–∞—Ä–∞ */
    .css-1cypcdb.e1fqkh3o11, .css-1r6o8ze.edgvbvh5 {
        border-right: none !important;
    }
    </style>
    """, unsafe_allow_html=True)

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
from src.pages import home, analysis, predict, team, info
from src.utils.ui import load_user_preferences
from src.utils.storage import clear_prediction_cache
from src.services.model_service import ModelService
from src.config.app_config import LOGGING_CONFIG
from src.config.model_config import MODEL_CONFIG

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging.config
logging.config.dictConfig(LOGGING_CONFIG)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∏–ª–∏
def load_styles():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç CSS —Å—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    css_path = Path("static/style.css")
    if css_path.exists():
        with open(css_path, encoding='utf-8') as css_file:
            st.markdown(f'<style>{css_file.read()}</style>', unsafe_allow_html=True)
    else:
        logger.error(f"–§–∞–π–ª —Å—Ç–∏–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {css_path}")

def initialize_services():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –º–æ–¥–µ–ª–µ–π (–ª–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)
    if 'model_service' not in st.session_state:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –º–æ–¥–µ–ª–µ–π")
        st.session_state.model_service = ModelService()
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    if 'cache_cleared' not in st.session_state:
        st.session_state.cache_cleared = False
    
    # –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
    if not st.session_state.cache_cleared:
        clear_prediction_cache()
        st.session_state.cache_cleared = True
        logger.info("–ö—ç—à –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –æ—á–∏—â–µ–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")

def create_sidebar():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å."""
    with st.sidebar:
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø
        st.image("images/logo.png", width=150, use_container_width=False)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –º–µ–Ω—é —Å –ø–æ–º–æ—â—å—é streamlit-option-menu
        selected = option_menu(
            menu_title="AdsorpNET",
            options=[
                "–ì–ª–∞–≤–Ω–∞—è", 
                "–û –º–µ—Ç–∞–ª–ª–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä–∫–∞—Å–∞—Ö", 
                "AI —Å–∏–Ω—Ç–µ–∑ MOF", 
                "–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã", 
                "–û –ø—Ä–æ–µ–∫—Ç–µ"
            ],
            icons=[
                "house-fill", 
                "info-circle-fill", 
                "cpu-fill", 
                "graph-up", 
                "people-fill"
            ],
            menu_icon="gem",
            default_index=0,
            key="main_menu",
            styles={
                "container": {"padding": "0px", "background-color": "#1E2D3A"},
                "icon": {"color": "#4ECDC4", "font-size": "18px"},
                "nav-link": {
                    "font-size": "16px", 
                    "text-align": "left", 
                    "margin": "0px", 
                    "padding": "10px 15px",
                    "border-radius": "0px",
                    "--hover-color": "#2B3E4F"
                },
                "nav-link-selected": {
                    "background-color": "#2B3E4F", 
                    "font-weight": "bold",
                    "color": "#4ECDC4",
                    "border-left": "3px solid #4ECDC4"
                },
                "menu-title": {
                    "font-size": "22px",
                    "font-weight": "bold",
                    "margin-bottom": "10px",
                    "padding": "10px 5px",
                    "color": "#FFFFFF"
                }
            }
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        st.markdown("<hr style='margin: 20px 0; border: none; height: 1px; background-color: #2B3E4F;'>", unsafe_allow_html=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —Å–∏—Å—Ç–µ–º–µ
        with st.expander("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ", expanded=False):
            
            # –ë–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–¥–µ–ª—è—Ö
            st.markdown("##### üß† –ú–æ–¥–µ–ª–∏")
            models_list = [model_name for model_name in MODEL_CONFIG]
            columns = st.columns(2)
            for i, model in enumerate(models_list):
                col_idx = i % 2
                with columns[col_idx]:
                    st.markdown(f"<div style='background-color: #2B3E4F; padding: 5px 10px; border-radius: 5px; margin-bottom: 5px;'><small>‚úì {model}</small></div>", unsafe_allow_html=True)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CUDA (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
            import torch
            if torch.cuda.is_available():
                st.markdown("##### üíª –ê–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ")
                device_name = torch.cuda.get_device_name(0)
                memory = torch.cuda.get_device_properties(0).total_memory / (1024**3)
                
                st.markdown(f"""
                <div style='background-color: #2B3E4F; padding: 10px; border-radius: 5px; margin: 5px 0;'>
                    <div style='display: flex; justify-content: space-between;'>
                        <small>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</small>
                        <small><b>{device_name}</b></small>
                    </div>
                    <div style='display: flex; justify-content: space-between;'>
                        <small>–ü–∞–º—è—Ç—å:</small>
                        <small><b>{memory:.2f} –ì–ë</b></small>
                    </div>
                </div>
                """, unsafe_allow_html=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —Å–∞–π–¥–±–∞—Ä–∞
        st.markdown("<div style='position: absolute; bottom: 0; padding: 10px; width: 100%; text-align: center; font-size: 12px; color: #4ECDC4;'>AdsorpNET ¬© 2025 v1.0.0</div>", unsafe_allow_html=True)
        
        return selected

def run():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ AdsorpNET."""
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è AdsorpNET")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        load_user_preferences()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∏–ª–∏
        load_styles()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        add_custom_styles()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        initialize_services()
        
        # –°–æ–∑–¥–∞–µ–º –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é –∏ –ø–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç
        selected = create_sidebar()
        
        # –í—ã–±–æ—Ä –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if selected == "–ì–ª–∞–≤–Ω–∞—è":
            home.show()
        elif selected == "AI —Å–∏–Ω—Ç–µ–∑ MOF":
            predict.show()
        elif selected == "–û –º–µ—Ç–∞–ª–ª–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä–∫–∞—Å–∞—Ö":
            info.show()
        elif selected == "–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã":
            analysis.show()
        elif selected == "–û –ø—Ä–æ–µ–∫—Ç–µ":
            team.show()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {str(e)}", exc_info=True)
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {str(e)}")

if __name__ == "__main__":
    run()
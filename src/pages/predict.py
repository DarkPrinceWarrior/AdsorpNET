"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–µ—Ç–æ–¥–∏–∫–∏ —Å–∏–Ω—Ç–µ–∑–∞ MOF.
"""

import streamlit as st
import pandas as pd
import base64
from io import BytesIO
from typing import Dict, Any, List

from src.utils.ui import load_theme_css
from src.services.predictor_service import PredictorService

def get_img_as_base64(file_path: str) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64 –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤ HTML.
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
    Returns:
        str: –°—Ç—Ä–æ–∫–∞ base64
    """
    with open(file_path, "rb") as f:
        data = f.read()
    return base64.b64encode(data).decode()

def display_predicted_parameters(parameters: List[Dict[str, Any]]) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
    —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏.
    
    Args:
        parameters: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    """
    # –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
    st.markdown("""
    <style>
    .result-card {
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        padding: 15px;
        margin-bottom: 20px;
        transition: transform 0.3s;
    }
    .result-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 16px rgba(0,0,0,0.15);
    }
    .card-header {
        font-size: 18px;
        font-weight: bold;
        color: #0B2545;
        border-bottom: 2px solid #f0f0f0;
        padding-bottom: 10px;
        margin-bottom: 15px;
    }
    .parameter-value {
        font-size: 24px;
        font-weight: bold;
        color: #0B2545;
        margin: 10px 0;
        text-align: center;
    }
    .parameter-info {
        color: #666;
        font-size: 14px;
        margin-top: 5px;
        text-align: center;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
    st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏–Ω—Ç–µ–∑–∞")
    st.markdown("""
        <p style="color: #666; margin-bottom: 20px;">
            –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ MOF —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏. 
            –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.
        </p>
    """, unsafe_allow_html=True)
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
    categories = {
        "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã": ["–ú–µ—Ç–∞–ª–ª", "–õ–∏–≥–∞–Ω–¥", "–†–∞—Å—Ç–≤–æ—Ä–∏—Ç–µ–ª—å"],
        "–ü—Ä–æ–ø–æ—Ä—Ü–∏–∏": ["m (—Å–æ–ª–∏), –≥", "m(–∫–∏—Å-—Ç—ã), –≥", "V—Å–∏–Ω. (—Ä-–ª—è), –º–ª"],
        "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã": ["–¢.—Å–∏–Ω., ¬∞–°", "–¢ —Å—É—à., ¬∞–°", "T—Ä–µ–≥, ·µí–°"]
    }
    
    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    tab1, tab2, tab3 = st.tabs(list(categories.keys()))
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –¥–æ–±–∞–≤–∏–≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
    enhanced_params = []
    for param in parameters:
        enhanced_param = param.copy()
        
        # –î–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        if param["prob"] is not None and param["name"] in ["–ú–µ—Ç–∞–ª–ª", "–õ–∏–≥–∞–Ω–¥", "–†–∞—Å—Ç–≤–æ—Ä–∏—Ç–µ–ª—å"]:
            # –ó–¥–µ—Å—å –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å top_3 –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            alternatives = []
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –±—Ä–∞—Ç—å –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
            if param["name"] == "–ú–µ—Ç–∞–ª–ª":
                alternatives = [
                    {"value": "Fe", "probability": 82.5},
                    {"value": "Al", "probability": 65.3}
                ]
            elif param["name"] == "–õ–∏–≥–∞–Ω–¥":
                alternatives = [
                    {"value": "BTC", "probability": 78.2},
                    {"value": "NH2-BDC", "probability": 56.8}
                ]
            elif param["name"] == "–†–∞—Å—Ç–≤–æ—Ä–∏—Ç–µ–ª—å":
                alternatives = [
                    {"value": "–î–ú–§–ê/–≠—Ç–∞–Ω–æ–ª/–í–æ–¥–∞", "probability": 75.9},
                    {"value": "–î–ú–§–ê", "probability": 68.4}
                ]
                
            enhanced_param["alternatives"] = alternatives
            
        enhanced_params.append(enhanced_param)
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    def show_category_cards(category_params, all_params):
        for param_name in category_params:
            # –ù–∞—Ö–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ —Å–ø–∏—Å–∫–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            param = next((p for p in all_params if p["name"] == param_name), None)
            if not param:
                continue
                
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            with st.container():
                st.markdown(f"<div class='result-card'>", unsafe_allow_html=True)
                st.markdown(f"<div class='card-header'>{param_name}</div>", unsafe_allow_html=True)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∫–æ–Ω–∫—É –∏ –∑–Ω–∞—á–µ–Ω–∏–µ
                col1, col2 = st.columns([1, 2])
                with col1:
                    st.image(
                        f"data:image/png;base64,{param['image_base64']}", 
                        width=80
                    )
                with col2:
                    st.markdown(f"<div class='parameter-value'>{param['value']}</div>", unsafe_allow_html=True)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
                if param["prob"] is not None:
                    confidence_value = param["prob"] * 100
                    confidence_color = (
                        "#FFC107" if confidence_value < 60 else
                        "#8BC34A" if confidence_value < 80 else
                        "#4CAF50"
                    )
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    st.progress(confidence_value / 100)
                    st.markdown(f"<div class='parameter-info'>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {confidence_value:.1f}%</div>", unsafe_allow_html=True)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
                if "alternatives" in param and param["alternatives"]:
                    st.markdown("<div class='parameter-info'>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:</div>", unsafe_allow_html=True)
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤
                    alt_cols = st.columns(len(param["alternatives"]))
                    for i, alt in enumerate(param["alternatives"]):
                        with alt_cols[i]:
                            st.button(
                                f"{alt['value']} ({alt['probability']:.1f}%)",
                                key=f"alt_{param_name}_{i}",
                                use_container_width=True
                            )
                
                st.markdown("</div>", unsafe_allow_html=True)
            
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –≤–∫–ª–∞–¥–∫–∞–º
    with tab1:
        show_category_cards(categories["–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"], enhanced_params)
    
    with tab2:
        show_category_cards(categories["–ü—Ä–æ–ø–æ—Ä—Ü–∏–∏"], enhanced_params)
        
    with tab3:
        show_category_cards(categories["–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"], enhanced_params)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    st.info("""
        üí° **–°–æ–≤–µ—Ç:** –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏ –∏ –∏–º–µ—é—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å—Ç–µ–ø–µ–Ω—å 
        —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏. –î–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞–∏–ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ 
        —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
    """)
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    def show_category_cards(category_params, all_params):
        st.markdown('<div class="results-container">', unsafe_allow_html=True)
        
        for param_name in category_params:
            # –ù–∞—Ö–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ —Å–ø–∏—Å–∫–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            param = next((p for p in all_params if p["name"] == param_name), None)
            if not param:
                continue
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidence_color = "#4CAF50"  # –ó–µ–ª–µ–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            confidence_value = 0
            confidence_text = ""
            
            if param["prob"] is not None:
                confidence_value = param["prob"] * 100
                if confidence_value < 60:
                    confidence_color = "#FFC107"  # –ñ–µ–ª—Ç—ã–π –¥–ª—è –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                elif confidence_value < 80:
                    confidence_color = "#8BC34A"  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π –¥–ª—è —Å—Ä–µ–¥–Ω–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                
                confidence_text = f"{confidence_value:.1f}%"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
            card_html = f"""
            <div class="parameter-card animate-in">
                <div class="card-header">
                    {param_name}
                </div>
                <div class="card-content">
                    <img src="data:image/png;base64,{param['image_base64']}" class="parameter-icon" alt="{param_name}">
                    <div class="parameter-value">{param['value']}</div>
            """
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            if param["prob"] is not None:
                card_html += f"""
                    <div class="confidence-circle" 
                         style="--confidence: {confidence_value}%;" 
                         data-value="{confidence_text}">
                    </div>
                    <div class="parameter-info">–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏</div>
                """
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
            if "alternatives" in param and param["alternatives"]:
                card_html += """
                    <div class="alternatives-tabs">
                        <div class="parameter-info">–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:</div>
                """
                
                for i, alt in enumerate(param["alternatives"]):
                    active_class = "active" if i == 0 else ""
                    card_html += f"""
                        <span class="alternatives-tab {active_class}">
                            {alt['value']} ({alt['probability']:.1f}%)
                        </span>
                    """
                
                card_html += "</div>"
            
            card_html += """
                </div>
            </div>
            """
            
            st.markdown(card_html, unsafe_allow_html=True)
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –¥–æ–±–∞–≤–∏–≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
    enhanced_params = []
    for param in parameters:
        enhanced_param = param.copy()
        
        # –î–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        if param["prob"] is not None and param["name"] in ["–ú–µ—Ç–∞–ª–ª", "–õ–∏–≥–∞–Ω–¥", "–†–∞—Å—Ç–≤–æ—Ä–∏—Ç–µ–ª—å"]:
            # –ó–¥–µ—Å—å –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å top_3 –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            alternatives = []
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –±—Ä–∞—Ç—å –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
            if param["name"] == "–ú–µ—Ç–∞–ª–ª":
                alternatives = [
                    {"value": "Fe", "probability": 82.5},
                    {"value": "Al", "probability": 65.3}
                ]
            elif param["name"] == "–õ–∏–≥–∞–Ω–¥":
                alternatives = [
                    {"value": "BTC", "probability": 78.2},
                    {"value": "NH2-BDC", "probability": 56.8}
                ]
            elif param["name"] == "–†–∞—Å—Ç–≤–æ—Ä–∏—Ç–µ–ª—å":
                alternatives = [
                    {"value": "–î–ú–§–ê/–≠—Ç–∞–Ω–æ–ª/–í–æ–¥–∞", "probability": 75.9},
                    {"value": "–î–ú–§–ê", "probability": 68.4}
                ]
                
            enhanced_param["alternatives"] = alternatives
            
        enhanced_params.append(enhanced_param)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –≤–∫–ª–∞–¥–∫–∞–º
    with tab1:
        show_category_cards(categories["–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"], enhanced_params)
    
    with tab2:
        show_category_cards(categories["–ü—Ä–æ–ø–æ—Ä—Ü–∏–∏"], enhanced_params)
        
    with tab3:
        show_category_cards(categories["–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"], enhanced_params)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    st.info("""
        üí° **–°–æ–≤–µ—Ç:** –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏ –∏ –∏–º–µ—é—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å—Ç–µ–ø–µ–Ω—å 
        —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏. –î–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞–∏–ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ 
        —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
    """)

def prepare_download_df(
    input_params: Dict[str, float], 
    prediction_results: Dict[str, Any]
) -> pd.DataFrame:
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç DataFrame –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    
    Args:
        input_params: –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        prediction_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        
    Returns:
        pd.DataFrame: DataFrame –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    """
    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    data = {
        'S–ë–≠–¢, –º2/–≥': [input_params['SBAT_m2_gr']],
        '–∞0, –º–º–æ–ª—å/–≥': [input_params['a0_mmoll_gr']],
        'E, –∫–î–∂/–º–æ–ª—å': [input_params['E_kDg_moll']],
        'Ws, —Å–º3/–≥': [input_params['Ws_cm3_gr']],
        'Sme, –º2/–≥': [input_params['Sme_m2_gr']]
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    derived = prediction_results['derived_features']
    data.update({
        'W0, —Å–º3/–≥': [derived['W0_cm3_g']],
        'E0, –∫–î–∂/–º–æ–ª—å': [derived['E0_KDG_moll']],
        '—Ö0, –Ω–º': [derived['x0_nm']],
        'Wme, —Å–º3/–≥': [derived['Wme_cm3_gr']]
    })
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    data.update({
        '–ú–µ—Ç–∞–ª–ª': [prediction_results['metal']['metal_type']],
        '–õ–∏–≥–∞–Ω–¥': [prediction_results['ligand']['ligand_type']],
        '–†–∞—Å—Ç–≤–æ—Ä–∏—Ç–µ–ª—å': [prediction_results['solvent']['solvent_type']],
        'm (—Å–æ–ª–∏), –≥': [prediction_results['salt_mass']],
        'm(–∫–∏—Å-—Ç—ã), –≥': [prediction_results['acid_mass']],
        'V—Å–∏–Ω. (—Ä-–ª—è), –º–ª': [prediction_results['synthesis_volume']],
        '–¢.—Å–∏–Ω., ¬∞–°': [prediction_results['tsyn']['temperature']],
        '–¢ —Å—É—à., ¬∞–°': [prediction_results['tdry']['temperature']],
        'T—Ä–µ–≥, ·µí–°': [prediction_results['treg']['temperature']]
    })
    
    return pd.DataFrame(data)

def format_prediction_results_for_display(prediction_results: Dict[str, Any]) -> List[Dict[str, Any]]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    
    Args:
        prediction_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        
    Returns:
        List[Dict[str, Any]]: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    parameters = [
        {
            "image": "images/Treg.png",
            "image_base64": get_img_as_base64("images/Treg.png"),
            "name": "T—Ä–µ–≥, ·µí–°",
            "value": prediction_results['treg']['temperature'],
            "prob": prediction_results['treg']['confidence']
        },
        {
            "image": "images/Metal.png",
            "image_base64": get_img_as_base64("images/Metal.png"),
            "name": "–ú–µ—Ç–∞–ª–ª",
            "value": prediction_results['metal']['metal_type'],
            "prob": prediction_results['metal']['confidence']
        },
        {
            "image": "images/Ligand.png",
            "image_base64": get_img_as_base64("images/Ligand.png"),
            "name": "–õ–∏–≥–∞–Ω–¥",
            "value": prediction_results['ligand']['ligand_type'],
            "prob": prediction_results['ligand']['confidence']
        },
        {
            "image": "images/Solvent.png",
            "image_base64": get_img_as_base64("images/Solvent.png"),
            "name": "–†–∞—Å—Ç–≤–æ—Ä–∏—Ç–µ–ª—å",
            "value": prediction_results['solvent']['solvent_type'],
            "prob": prediction_results['solvent']['confidence']
        },
        {
            "image": "images/SaltMass.png",
            "image_base64": get_img_as_base64("images/SaltMass.png"),
            "name": "m (—Å–æ–ª–∏), –≥",
            "value": prediction_results['salt_mass'],
            "prob": None  # –†–µ–≥—Ä–µ—Å—Å–∏—è, –Ω–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        },
        {
            "image": "images/AcidMass.png",
            "image_base64": get_img_as_base64("images/AcidMass.png"),
            "name": "m(–∫–∏—Å-—Ç—ã), –≥",
            "value": prediction_results['acid_mass'],
            "prob": None  # –†–µ–≥—Ä–µ—Å—Å–∏—è, –Ω–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        },
        {
            "image": "images/Tsyn.png",
            "image_base64": get_img_as_base64("images/Tsyn.png"),
            "name": "–¢.—Å–∏–Ω., ¬∞–°",
            "value": prediction_results['tsyn']['temperature'],
            "prob": prediction_results['tsyn']['confidence']
        },
        {
            "image": "images/Tdry.png",
            "image_base64": get_img_as_base64("images/Tdry.png"),
            "name": "–¢ —Å—É—à., ¬∞–°",
            "value": prediction_results['tdry']['temperature'],
            "prob": prediction_results['tdry']['confidence']
        },
        {
            "image": "images/Vsyn.png",
            "image_base64": get_img_as_base64("images/Vsyn.png"),
            "name": "V—Å–∏–Ω. (—Ä-–ª—è), –º–ª",
            "value": prediction_results['synthesis_volume'],
            "prob": None  # –†–µ–≥—Ä–µ—Å—Å–∏—è, –Ω–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        },
    ]
    
    return parameters

def render_input_form() -> Dict[str, float]:
    """
    –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π, 
    –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
    
    Returns:
        Dict[str, float]: –í–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    """
    # –î–æ–±–∞–≤–ª—è–µ–º CSS —Å—Ç–∏–ª–∏ —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Streamlit
    st.markdown("""
    <style>
    .parameter-group {
        border-left: 3px solid #FF4B4B;
        padding-left: 15px;
        margin-bottom: 20px;
        background-color: #f8f9fa;
        border-radius: 5px;
        padding: 15px;
    }
    .hint-text {
        color: #6c757d;
        font-size: 14px;
        margin-top: 5px;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # –ì—Ä—É–ø–ø–∞ 1: –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
    st.markdown('<div class="parameter-group">', unsafe_allow_html=True)
    st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏")
    
    with st.container():
        col1, col2 = st.columns([3, 1])
        with col1:
            SBAT_m2_gr = st.number_input(
                "S–ë–≠–¢, –º2/–≥ - —É–¥–µ–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏", 
                min_value=100.0,
                help="–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–∞. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 100 –º¬≤/–≥.",
                key="SBAT_m2_gr"
            )
        with col2:
            st.markdown("<div style='margin-top: 30px;'>‚ÑπÔ∏è</div>", unsafe_allow_html=True)
        
        st.markdown('<div class="hint-text">–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–∞. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 100 –º¬≤/–≥.</div>', unsafe_allow_html=True)
        
        col1, col2 = st.columns([3, 1])
        with col1:
            a0_mmoll_gr = st.number_input(
                "–∞0, –º–º–æ–ª—å/–≥ - –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è –∞–¥—Å–æ—Ä–±—Ü–∏—è", 
                min_value=0.0,
                help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Å–æ—Ä–±–∞—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –ø–æ–≥–ª–æ—Ç–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª.",
                key="a0_mmoll_gr"
            )
        with col2:
            st.markdown("<div style='margin-top: 30px;'>‚ÑπÔ∏è</div>", unsafe_allow_html=True)
        
        st.markdown('<div class="hint-text">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Å–æ—Ä–±–∞—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –ø–æ–≥–ª–æ—Ç–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª.</div>', unsafe_allow_html=True)
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # –ì—Ä—É–ø–ø–∞ 2: –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    st.markdown('<div class="parameter-group">', unsafe_allow_html=True)
    st.subheader("–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    
    with st.container():
        col1, col2 = st.columns([3, 1])
        with col1:
            E_kDg_moll = st.number_input(
                "E, –∫–î–∂/–º–æ–ª—å - —ç–Ω–µ—Ä–≥–∏—è –∞–¥—Å–æ—Ä–±—Ü–∏–∏ –∞–∑–æ—Ç–∞", 
                min_value=0.0,
                help="–•–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Å–∏–ª—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É –∞–¥—Å–æ—Ä–±–µ–Ω—Ç–æ–º –∏ –º–æ–ª–µ–∫—É–ª–∞–º–∏ –∞–∑–æ—Ç–∞.",
                key="E_kDg_moll"
            )
        with col2:
            st.markdown("<div style='margin-top: 30px;'>‚ÑπÔ∏è</div>", unsafe_allow_html=True)
        
        st.markdown('<div class="hint-text">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Å–∏–ª—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É –∞–¥—Å–æ—Ä–±–µ–Ω—Ç–æ–º –∏ –º–æ–ª–µ–∫—É–ª–∞–º–∏ –∞–∑–æ—Ç–∞.</div>', unsafe_allow_html=True)
        
        # –†–∞—Å—á–µ—Ç –∑–∞–≤–∏—Å–∏–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        W0_cm3_g = 0.034692 * a0_mmoll_gr
        E0_KDG_moll = E_kDg_moll / 0.33 if E_kDg_moll > 0 else 1e-6
        x0_nm = 12 / E0_KDG_moll
        approx_Ws_cm3_gr = W0_cm3_g * 1.2  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø–æ–∑–≤–æ–ª—è–µ–º —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        st.info(f"üìä **–†–∞—Å—á–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –æ–±—ä–µ–º–∞ –ø–æ—Ä:** {approx_Ws_cm3_gr:.4f} —Å–º¬≥/–≥")
        
        col1, col2 = st.columns([3, 1])
        with col1:
            Ws_cm3_gr = st.number_input(
                "Ws, —Å–º¬≥/–≥ - –æ–±—â–∏–π –æ–±—ä–µ–º –ø–æ—Ä", 
                min_value=0.0,
                value=float(approx_Ws_cm3_gr) if approx_Ws_cm3_gr > 0 else 0.1,
                help="–û–±—â–∏–π –æ–±—ä–µ–º –ø–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞. –û–±—ã—á–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –æ–±—ä–µ–º–∞ –º–∏–∫—Ä–æ–ø–æ—Ä.",
                key="Ws_cm3_gr"
            )
        with col2:
            st.markdown("<div style='margin-top: 30px;'>‚ÑπÔ∏è</div>", unsafe_allow_html=True)
        
        st.markdown('<div class="hint-text">–û–±—â–∏–π –æ–±—ä–µ–º –ø–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞. –û–±—ã—á–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –æ–±—ä–µ–º–∞ –º–∏–∫—Ä–æ–ø–æ—Ä.</div>', unsafe_allow_html=True)
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # –ì—Ä—É–ø–ø–∞ 3: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–µ–∑–æ–ø–æ—Ä
    st.markdown('<div class="parameter-group">', unsafe_allow_html=True)
    st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–µ–∑–æ–ø–æ—Ä")
    
    with st.container():
        # –†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ –º–µ–∑–æ–ø–æ—Ä
        Wme_cm3_gr = Ws_cm3_gr - W0_cm3_g
        st.info(f"üìä **–†–∞—Å—á–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –º–µ–∑–æ–ø–æ—Ä:** {Wme_cm3_gr:.4f} —Å–º¬≥/–≥")
        
        col1, col2 = st.columns([3, 1])
        with col1:
            Sme_m2_gr = st.number_input(
                "Sme, –º2/–≥ - –ø–ª–æ—â–∞–¥—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –º–µ–∑–æ–ø–æ—Ä", 
                min_value=0.0,
                help="–ü–ª–æ—â–∞–¥—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–∞—è –º–µ–∑–æ–ø–æ—Ä–∞–º–∏ (2-50 –Ω–º).",
                key="Sme_m2_gr"
            )
        with col2:
            st.markdown("<div style='margin-top: 30px;'>‚ÑπÔ∏è</div>", unsafe_allow_html=True)
        
        st.markdown('<div class="hint-text">–ü–ª–æ—â–∞–¥—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–∞—è –º–µ–∑–æ–ø–æ—Ä–∞–º–∏ (2-50 –Ω–º).</div>', unsafe_allow_html=True)
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # –†–∞–∑–¥–µ–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    with st.expander("–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", expanded=False):
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric(
                label="–û–±—ä–µ–º –º–∏–∫—Ä–æ–ø–æ—Ä (W0)", 
                value=f"{W0_cm3_g:.4f} —Å–º¬≥/–≥",
                help="–†–∞—Å—Å—á–∏—Ç–∞–Ω–æ –∫–∞–∫ 0.034692 * –∞0"
            )
            st.metric(
                label="–ü–æ–ª—É—à–∏—Ä–∏–Ω–∞ –ø–æ—Ä (x0)", 
                value=f"{x0_nm:.4f} –Ω–º",
                help="–†–∞—Å—Å—á–∏—Ç–∞–Ω–æ –∫–∞–∫ 12 / E0"
            )
            
        with col2:
            st.metric(
                label="–≠–Ω–µ—Ä–≥–∏—è –∞–¥—Å–æ—Ä–±—Ü–∏–∏ –±–µ–Ω–∑–æ–ª–∞ (E0)", 
                value=f"{E0_KDG_moll:.4f} –∫–î–∂/–º–æ–ª—å",
                help="–†–∞—Å—Å—á–∏—Ç–∞–Ω–æ –∫–∞–∫ E / 0.33"
            )
            st.metric(
                label="–û–±—ä–µ–º –º–µ–∑–æ–ø–æ—Ä (Wme)", 
                value=f"{Wme_cm3_gr:.4f} —Å–º¬≥/–≥",
                help="–†–∞—Å—Å—á–∏—Ç–∞–Ω–æ –∫–∞–∫ Ws - W0"
            )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    valid_inputs = (
        SBAT_m2_gr >= 100.0 and
        a0_mmoll_gr > 0 and
        E_kDg_moll > 0 and
        Ws_cm3_gr > 0 and
        Sme_m2_gr >= 0
    )
    
    # –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å —É—Å–ª–æ–≤–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    if valid_inputs:
        if st.button(
            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏ –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–æ–¥–∏–∫—É —Å–∏–Ω—Ç–µ–∑–∞", 
            type="primary",
            use_container_width=True
        ):
            st.session_state.submitted = True
    else:
        st.button(
            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏ –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–æ–¥–∏–∫—É —Å–∏–Ω—Ç–µ–∑–∞", 
            disabled=True,
            use_container_width=True
        )
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π")
    
    return {
        'SBAT_m2_gr': SBAT_m2_gr,
        'a0_mmoll_gr': a0_mmoll_gr,
        'E_kDg_moll': E_kDg_moll,
        'Ws_cm3_gr': Ws_cm3_gr,
        'Sme_m2_gr': Sme_m2_gr
    }

def show():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–µ—Ç–æ–¥–∏–∫–∏ —Å–∏–Ω—Ç–µ–∑–∞ MOF."""
    load_theme_css()
    
    st.title("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∏–∫–∏ —Å–∏–Ω—Ç–µ–∑–∞ MOFs")
    
    st.markdown("""
    ## –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∏–∫–∏ —Å–∏–Ω—Ç–µ–∑–∞ MOF

    –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏–Ω—Ç–µ–∑–∞ –º–µ—Ç–∞–ª–ª-–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä–∫–∞—Å–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä (MOF) –Ω–∞ –æ—Å–Ω–æ–≤–µ –∂–µ–ª–∞–µ–º—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ-—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.

    ### –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?

    1. **–í–≤–æ–¥ –∂–µ–ª–∞–µ–º—ã—Ö –°–≠–•**
    –í—ã —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ —Ü–µ–ª–µ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ-—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π MOF.

    2. **–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤**
    - –ù–∞ –ø–µ—Ä–≤–æ–º —ç—Ç–∞–ø–µ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–µ—Ç–∞–ª–ª
    - –ó–∞—Ç–µ–º, —Å —É—á–µ—Ç–æ–º –º–µ—Ç–∞–ª–ª–∞, –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ª–∏–≥–∞–Ω–¥
    - –°–ª–µ–¥—É—é—â–∏–º —à–∞–≥–æ–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞—Å—Ç–≤–æ—Ä–∏—Ç–µ–ª—å
    - –ù–∞–∫–æ–Ω–µ—Ü, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–Ω—Ç–µ–∑–∞

    3. **–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤**
    –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–æ–ª–Ω—É—é –º–µ—Ç–æ–¥–∏–∫—É —Å–∏–Ω—Ç–µ–∑–∞, –∫–æ—Ç–æ—Ä–∞—è —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–æ–ª—É—á–µ–Ω–∏—é MOF —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏.

    ### –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π

    –ù–∞—à–∏ –º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç–∏–≥–∞—é—Ç –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏:
    - **91%** –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ —Ç–∏–ø–∞ –º–µ—Ç–∞–ª–ª–∞
    - **91%** –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ —Ç–∏–ø–∞ –ª–∏–≥–∞–Ω–¥–∞
    - **–°–≤—ã—à–µ 88%** (R¬≤) –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫–∏—Å–ª–æ—Ç–∞/—Å–æ–ª—å
    - **–°–≤—ã—à–µ 93%** (R¬≤) –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ä–∞—Å—Ç–≤–æ—Ä–∏—Ç–µ–ª—å/—Å–æ–ª—å
    - **–û–∫–æ–ª–æ 78%** (R¬≤) –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å–∏–Ω—Ç–µ–∑–∞

    ### –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏

    –í –æ—Å–Ω–æ–≤–µ —Å–∏—Å—Ç–µ–º—ã –ª–µ–∂–∞—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:
    - –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –±—É—Å—Ç–∏–Ω–≥ (CatBoost) –¥–ª—è –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    - –ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–æ–≤ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    - –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –º–µ—Ç–∞–ª–ª–æ–≤ –∏ –ª–∏–≥–∞–Ω–¥–æ–≤, —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫ pymatgen –∏ rdkit
    """)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
    if 'predictor_service' not in st.session_state:
        st.session_state.predictor_service = PredictorService()
        
    if 'prediction_results' not in st.session_state:
        st.session_state.prediction_results = None
        
    if 'input_params' not in st.session_state:
        st.session_state.input_params = None
    
    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ñ–æ—Ä–º—ã –≤–≤–æ–¥–∞
    input_params = render_input_form()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏ –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–æ–¥–∏–∫—É —Å–∏–Ω—Ç–µ–∑–∞"):
        with st.spinner('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...'):
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            prediction_results = st.session_state.predictor_service.run_full_prediction(
                input_params['SBAT_m2_gr'],
                input_params['a0_mmoll_gr'],
                input_params['E_kDg_moll'],
                input_params['Ws_cm3_gr'],
                input_params['Sme_m2_gr']
            )
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ session state
            st.session_state.prediction_results = prediction_results
            st.session_state.input_params = input_params
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if st.session_state.prediction_results is not None:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_params = format_prediction_results_for_display(st.session_state.prediction_results)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        display_predicted_parameters(display_params)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ DataFrame –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        download_df = prepare_download_df(st.session_state.input_params, st.session_state.prediction_results)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        buffer = BytesIO()
        with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
            download_df.to_excel(writer, index=False)
        buffer.seek(0)
        
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
            data=buffer,
            file_name='predicted_parameters.xlsx',
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )

if __name__ == "__main__":
    show()
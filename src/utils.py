import streamlit as st
from pathlib import Path
import json

def set_page_config():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    st.set_page_config(
        page_title="AdsorpNET",
        page_icon="üß™",
        layout="wide",
        initial_sidebar_state="expanded",
    )
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ç–∏–ª–∏
    load_custom_css()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º—É
    if "theme" not in st.session_state:
        st.session_state.theme = "light"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã –≤ —Å–∞–π–¥–±–∞—Ä
    with st.sidebar:
        theme = st.radio(
            "–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è",
            ("light", "dark"),
            key="theme",
            on_change=switch_theme
        )

def load_custom_css():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ç–∏–ª–∏ CSS"""
    custom_css = """
    <style>
        /* Light theme */
        [data-theme="light"] {
            --background-color: #ffffff;
            --text-color: #000000;
            --primary-color: #ff4b4b;
        }
        
        /* Dark theme */
        [data-theme="dark"] {
            --background-color: #0e1117;
            --text-color: #ffffff;
            --primary-color: #ff4b4b;
        }
        
        /* Common styles */
        .stButton>button {
            border-radius: 20px;
            padding: 10px 24px;
            transition: all 0.3s ease;
        }
        
        .stButton>button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        
        .stProgress > div > div {
            background-color: var(--primary-color);
        }
        
        /* Animations */
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        .st-emotion-cache-1v0mbdj {
            animation: fadeIn 0.5s ease-in;
        }
    </style>
    """
    st.markdown(custom_css, unsafe_allow_html=True)

def switch_theme():
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"""
    st.session_state.theme = "dark" if st.session_state.theme == "light" else "light"
    
def save_user_preferences():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    prefs_path = Path("user_preferences.json")
    preferences = {
        "theme": st.session_state.theme,
    }
    with open(prefs_path, "w") as f:
        json.dump(preferences, f)
        
def load_user_preferences():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    prefs_path = Path("user_preferences.json")
    if prefs_path.exists():
        with open(prefs_path) as f:
            preferences = json.load(f)
            st.session_state.update(preferences)

def show_error_message(message: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
    st.error(f"‚ùå {message}")
    
def show_success_message(message: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
    st.success(f"‚úÖ {message}")
    
def show_info_message(message: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    st.info(f"‚ÑπÔ∏è {message}")
    
def show_warning_message(message: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
    st.warning(f"‚ö†Ô∏è {message}")

def rate_limit(key: str, max_calls: int, time_window: int = 60):
    """
    –ü—Ä–æ—Å—Ç–æ–π rate limiter –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –≤—ã–∑–æ–≤–æ–≤
    
    Args:
        key (str): –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã–∑–æ–≤–∞
        max_calls (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤
        time_window (int): –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    Returns:
        bool: True –µ—Å–ª–∏ –≤—ã–∑–æ–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω, False –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
    """
    import time
    
    if "rate_limit" not in st.session_state:
        st.session_state.rate_limit = {}
    
    current_time = time.time()
    rate_limit_key = f"rate_limit_{key}"
    
    if rate_limit_key not in st.session_state.rate_limit:
        st.session_state.rate_limit[rate_limit_key] = []
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    st.session_state.rate_limit[rate_limit_key] = [
        t for t in st.session_state.rate_limit[rate_limit_key]
        if current_time - t < time_window
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if len(st.session_state.rate_limit[rate_limit_key]) >= max_calls:
        return False
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤—ã–∑–æ–≤
    st.session_state.rate_limit[rate_limit_key].append(current_time)
    return True 